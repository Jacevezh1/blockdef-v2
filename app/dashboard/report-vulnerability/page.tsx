"use client";

import type React from "react";

import { useState } from "react";
import { AppSidebar } from "@/components/app-sidebar";
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from "@/components/ui/breadcrumb";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { Separator } from "@/components/ui/separator";
import {
  SidebarInset,
  SidebarProvider,
  SidebarTrigger,
} from "@/components/ui/sidebar";
import {
  AlertTriangle,
  Shield,
  FileText,
  Code,
  Users,
  CheckCircle,
  Zap,
  Lock,
} from "lucide-react";

export default function ReportVulnerabilityPage() {
  const [formData, setFormData] = useState({
    title: "",
    severity: "",
    category: "",
    blockchain: "",
    protocol: "",
    description: "",
    technicalDetails: "",
    proofOfConcept: "",
    impact: "",
    recommendation: "",
    contactEmail: "",
    anonymous: false,
    bountyEligible: false,
  });

  const [submitted, setSubmitted] = useState(false);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // Handle form submission
    setSubmitted(true);
  };

  const severityLevels = [
    {
      value: "critical",
      label: "Critical",
      color: "bg-red-500",
      description: "Immediate threat to funds or protocol",
    },
    {
      value: "high",
      label: "High",
      color: "bg-orange-500",
      description: "Significant security risk",
    },
    {
      value: "medium",
      label: "Medium",
      color: "bg-yellow-500",
      description: "Moderate security concern",
    },
    {
      value: "low",
      label: "Low",
      color: "bg-blue-500",
      description: "Minor security issue",
    },
    {
      value: "info",
      label: "Informational",
      color: "bg-gray-500",
      description: "Security-related information",
    },
  ];

  const categories = [
    "Smart Contract Vulnerability",
    "Protocol Logic Flaw",
    "Access Control Issue",
    "Reentrancy Attack",
    "Oracle Manipulation",
    "Flash Loan Attack",
    "Governance Attack",
    "Bridge Vulnerability",
    "MEV Exploitation",
    "Other",
  ];

  const blockchains = [
    "Ethereum",
    "Binance Smart Chain",
    "Polygon",
    "Arbitrum",
    "Optimism",
    "Avalanche",
    "Fantom",
    "Solana",
    "Other",
  ];

  if (submitted) {
    return (
      <SidebarProvider>
        <AppSidebar />
        <SidebarInset>
          <header className="flex h-16 shrink-0 items-center gap-2 border-b">
            <div className="flex items-center gap-2 px-4">
              <SidebarTrigger className="-ml-1" />
              <Separator orientation="vertical" className="mr-2 h-4" />
              <Breadcrumb>
                <BreadcrumbList>
                  <BreadcrumbItem className="hidden md:block">
                    <BreadcrumbLink href="/dashboard">Dashboard</BreadcrumbLink>
                  </BreadcrumbItem>
                  <BreadcrumbSeparator className="hidden md:block" />
                  <BreadcrumbItem>
                    <BreadcrumbPage>Report Vulnerability</BreadcrumbPage>
                  </BreadcrumbItem>
                </BreadcrumbList>
              </Breadcrumb>
            </div>
          </header>
          <div className="flex flex-1 flex-col gap-4 p-4 pt-0">
            <div className="max-w-2xl mx-auto text-center space-y-6 mt-8">
              <div className="h-10 w-10 rounded-full bg-green-100 flex items-center justify-center mx-auto">
                <CheckCircle className="h-5 w-5 text-green-600" />
              </div>
              <div>
                <h2 className="text-sm font-bold">
                  Vulnerability Report Submitted
                </h2>
                <p className="text-muted-foreground mt-2 text-sm">
                  Thank you for helping secure the blockchain ecosystem. Your
                  report has been received and will be reviewed by our security
                  team.
                </p>
              </div>
              <Card>
                <CardContent className="p-6">
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <span className="font-medium text-sm">Report ID</span>
                      <Badge variant="outline">VR-2024-0156</Badge>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="font-medium text-sm">Status</span>
                      <Badge>Under Review</Badge>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="font-medium text-sm">
                        Expected Response
                      </span>
                      <span className="text-sm text-muted-foreground">
                        Within 48 hours
                      </span>
                    </div>
                  </div>
                </CardContent>
              </Card>
              <div className="flex gap-4 justify-center">
                <Button onClick={() => setSubmitted(false)} size="sm">
                  Submit Another Report
                </Button>
                <Button variant="outline" size="sm">
                  Track Report Status
                </Button>
              </div>
            </div>
          </div>
        </SidebarInset>
      </SidebarProvider>
    );
  }

  return (
    <SidebarProvider>
      <AppSidebar />
      <SidebarInset>
        <header className="flex h-16 shrink-0 items-center gap-2 border-b">
          <div className="flex items-center gap-2 px-4">
            <SidebarTrigger className="-ml-1" />
            <Separator orientation="vertical" className="mr-2 h-4" />
            <Breadcrumb>
              <BreadcrumbList>
                <BreadcrumbItem className="hidden md:block">
                  <BreadcrumbLink href="/dashboard">Dashboard</BreadcrumbLink>
                </BreadcrumbItem>
                <BreadcrumbSeparator className="hidden md:block" />
                <BreadcrumbItem>
                  <BreadcrumbPage>Report Vulnerability</BreadcrumbPage>
                </BreadcrumbItem>
              </BreadcrumbList>
            </Breadcrumb>
          </div>
        </header>
        <div className="flex flex-1 flex-col gap-4 p-4 pt-0">
          <div className="flex items-center justify-between mt-4">
            <div>
              <h1 className="text-sm font-bold">Report a Vulnerability</h1>
              <p className="text-muted-foreground text-sm">
                Help secure the blockchain ecosystem by reporting security
                vulnerabilities
              </p>
            </div>
          </div>

          {/* Important Notice */}
          <Card className="border-orange-200 bg-orange-50 dark:border-orange-800 dark:bg-orange-950/20">
            <CardContent className="p-6">
              <div className="flex gap-4">
                <AlertTriangle className="h-4 w-4 text-orange-600 flex-shrink-0 mt-0.5" />
                <div>
                  <h3 className="font-semibold text-orange-800 dark:text-orange-200 mb-2 text-sm">
                    Important Guidelines
                  </h3>
                  <ul className="text-sm text-orange-700 dark:text-orange-300 space-y-1">
                    <li>• Do not exploit vulnerabilities for personal gain</li>
                    <li>
                      • Provide detailed technical information to help with
                      verification
                    </li>
                    <li>• Include proof-of-concept code when possible</li>
                    <li>• Reports are reviewed within 48 hours</li>
                    <li>
                      • Eligible reports may qualify for bug bounty rewards
                    </li>
                  </ul>
                </div>
              </div>
            </CardContent>
          </Card>

          <form onSubmit={handleSubmit} className="space-y-8">
            <div className="grid gap-8 lg:grid-cols-3">
              {/* Main Form */}
              <div className="lg:col-span-2 space-y-6">
                {/* Basic Information */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2 text-sm">
                      <FileText className="h-5 w-5" />
                      Basic Information
                    </CardTitle>
                    <CardDescription className="text-sm">
                      Provide basic details about the vulnerability
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4 text-sm">
                    <div>
                      <Label htmlFor="title">Vulnerability Title *</Label>
                      <Input
                        id="title"
                        placeholder="Brief, descriptive title of the vulnerability"
                        value={formData.title}
                        onChange={(e) =>
                          setFormData({ ...formData, title: e.target.value })
                        }
                        required
                      />
                    </div>

                    <div className="grid gap-4 md:grid-cols-2">
                      <div>
                        <Label htmlFor="severity">Severity Level *</Label>
                        <Select
                          value={formData.severity}
                          onValueChange={(value) =>
                            setFormData({ ...formData, severity: value })
                          }
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="Select severity" />
                          </SelectTrigger>
                          <SelectContent>
                            {severityLevels.map((level) => (
                              <SelectItem key={level.value} value={level.value}>
                                <div className="flex items-center gap-2">
                                  <div
                                    className={`h-3 w-3 rounded-full ${level.color}`}
                                  />
                                  {level.label}
                                </div>
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>

                      <div>
                        <Label htmlFor="category">Category *</Label>
                        <Select
                          value={formData.category}
                          onValueChange={(value) =>
                            setFormData({ ...formData, category: value })
                          }
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="Select category" />
                          </SelectTrigger>
                          <SelectContent>
                            {categories.map((category) => (
                              <SelectItem key={category} value={category}>
                                {category}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                    </div>

                    <div className="grid gap-4 md:grid-cols-2">
                      <div>
                        <Label htmlFor="blockchain">Blockchain Network *</Label>
                        <Select
                          value={formData.blockchain}
                          onValueChange={(value) =>
                            setFormData({ ...formData, blockchain: value })
                          }
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="Select blockchain" />
                          </SelectTrigger>
                          <SelectContent>
                            {blockchains.map((blockchain) => (
                              <SelectItem key={blockchain} value={blockchain}>
                                {blockchain}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>

                      <div>
                        <Label htmlFor="protocol">Protocol/Project Name</Label>
                        <Input
                          id="protocol"
                          placeholder="e.g., Uniswap, Compound, etc."
                          value={formData.protocol}
                          onChange={(e) =>
                            setFormData({
                              ...formData,
                              protocol: e.target.value,
                            })
                          }
                        />
                      </div>
                    </div>
                  </CardContent>
                </Card>

                {/* Technical Details */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2 text-sm">
                      <Code className="h-5 w-5" />
                      Technical Details
                    </CardTitle>
                    <CardDescription className="text-sms">
                      Provide detailed technical information about the
                      vulnerability
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4 text-sm">
                    <div>
                      <Label htmlFor="description">
                        Vulnerability Description *
                      </Label>
                      <Textarea
                        id="description"
                        placeholder="Describe the vulnerability, how it works, and what causes it..."
                        rows={4}
                        value={formData.description}
                        onChange={(e) =>
                          setFormData({
                            ...formData,
                            description: e.target.value,
                          })
                        }
                        required
                      />
                    </div>

                    <div>
                      <Label htmlFor="technicalDetails">
                        Technical Analysis
                      </Label>
                      <Textarea
                        id="technicalDetails"
                        placeholder="Provide technical details, code snippets, contract addresses, function names, etc..."
                        rows={6}
                        value={formData.technicalDetails}
                        onChange={(e) =>
                          setFormData({
                            ...formData,
                            technicalDetails: e.target.value,
                          })
                        }
                      />
                    </div>

                    <div>
                      <Label htmlFor="proofOfConcept">Proof of Concept</Label>
                      <Textarea
                        id="proofOfConcept"
                        placeholder="Provide step-by-step reproduction steps or code to demonstrate the vulnerability..."
                        rows={6}
                        value={formData.proofOfConcept}
                        onChange={(e) =>
                          setFormData({
                            ...formData,
                            proofOfConcept: e.target.value,
                          })
                        }
                      />
                    </div>
                  </CardContent>
                </Card>

                {/* Impact & Recommendations */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2 text-sm">
                      <Shield className="h-5 w-5" />
                      Impact & Recommendations
                    </CardTitle>
                    <CardDescription className="text-sm">
                      Describe the potential impact and suggested fixes
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <Label htmlFor="impact">Potential Impact *</Label>
                      <Textarea
                        id="impact"
                        placeholder="Describe the potential consequences if this vulnerability is exploited..."
                        rows={4}
                        value={formData.impact}
                        onChange={(e) =>
                          setFormData({ ...formData, impact: e.target.value })
                        }
                        required
                      />
                    </div>

                    <div>
                      <Label htmlFor="recommendation">Recommended Fix</Label>
                      <Textarea
                        id="recommendation"
                        placeholder="Suggest how this vulnerability could be fixed or mitigated..."
                        rows={4}
                        value={formData.recommendation}
                        onChange={(e) =>
                          setFormData({
                            ...formData,
                            recommendation: e.target.value,
                          })
                        }
                      />
                    </div>
                  </CardContent>
                </Card>

                {/* Contact Information */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2 text-sm">
                      <Users className="h-5 w-5" />
                      Contact Information
                    </CardTitle>
                    <CardDescription className="text-sm">
                      How can we reach you regarding this report?
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <Label htmlFor="contactEmail">Contact Email</Label>
                      <Input
                        id="contactEmail"
                        type="email"
                        placeholder="your.email@example.com"
                        value={formData.contactEmail}
                        onChange={(e) =>
                          setFormData({
                            ...formData,
                            contactEmail: e.target.value,
                          })
                        }
                      />
                    </div>

                    <div className="space-y-3">
                      <div className="flex items-center space-x-2">
                        <Checkbox
                          id="anonymous"
                          checked={formData.anonymous}
                          onCheckedChange={(checked) =>
                            setFormData({
                              ...formData,
                              anonymous: checked as boolean,
                            })
                          }
                        />
                        <Label htmlFor="anonymous" className="text-sm">
                          Submit anonymously (we won't be able to contact you)
                        </Label>
                      </div>

                      <div className="flex items-center space-x-2">
                        <Checkbox
                          id="bountyEligible"
                          checked={formData.bountyEligible}
                          onCheckedChange={(checked) =>
                            setFormData({
                              ...formData,
                              bountyEligible: checked as boolean,
                            })
                          }
                        />
                        <Label htmlFor="bountyEligible" className="text-sm">
                          I'm interested in bug bounty rewards (if eligible)
                        </Label>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* Sidebar */}
              <div className="space-y-6">
                {/* Severity Guide */}
                <Card>
                  <CardHeader>
                    <CardTitle className="text-sm">
                      Severity Guidelines
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    {severityLevels.map((level) => (
                      <div key={level.value} className="flex gap-3">
                        <div
                          className={`h-4 w-4 rounded-full ${level.color} mt-0.5 flex-shrink-0`}
                        />
                        <div>
                          <div className="font-medium text-sm">
                            {level.label}
                          </div>
                          <div className="text-xs text-muted-foreground">
                            {level.description}
                          </div>
                        </div>
                      </div>
                    ))}
                  </CardContent>
                </Card>

                {/* Bug Bounty Info */}
                <Card>
                  <CardHeader>
                    <CardTitle className="text-sm flex items-center gap-2">
                      <Zap className="h-4 w-4" />
                      Bug Bounty Program
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    {/*                     <div className="text-sm space-y-2">
                      <div className="flex justify-between">
                        <span>Critical:</span>
                        <span className="font-medium">$10,000 - $50,000</span>
                      </div>
                      <div className="flex justify-between">
                        <span>High:</span>
                        <span className="font-medium">$2,000 - $10,000</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Medium:</span>
                        <span className="font-medium">$500 - $2,000</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Low:</span>
                        <span className="font-medium">$100 - $500</span>
                      </div>
                    </div> */}
                    <Separator />
                    <p className="text-xs text-muted-foreground">
                      Cooming Soon.
                    </p>
                  </CardContent>
                </Card>

                {/* Security Notice */}
                <Card className="border-blue-200 bg-blue-50 dark:border-blue-800 dark:bg-blue-950/20">
                  <CardContent className="p-4">
                    <div className="flex gap-3">
                      <Lock className="h-4 w-4 text-blue-600 flex-shrink-0 mt-0.5" />
                      <div>
                        <h4 className="font-medium text-blue-800 dark:text-blue-200 mb-1 text-sm">
                          Confidential
                        </h4>
                        <p className="text-xs text-blue-700 dark:text-blue-300">
                          All vulnerability reports are treated as confidential
                          and will not be disclosed publicly without your
                          consent.
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>

            {/* Submit Button */}
            <div className="flex justify-end gap-4">
              <Button type="button" variant="outline" size="sm">
                Save Draft
              </Button>
              <Button type="submit" className="min-w-[140px]" size="sm">
                Submit Report
              </Button>
            </div>
          </form>
        </div>
      </SidebarInset>
    </SidebarProvider>
  );
}
