import { AppSidebar } from "@/components/app-sidebar";
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from "@/components/ui/breadcrumb";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import {
  SidebarInset,
  SidebarProvider,
  SidebarTrigger,
} from "@/components/ui/sidebar";
import { Calendar } from "lucide-react";
import { SiteFunctionsHeader } from "@/components/site-functions-header";
import { getExploitStats, getAllExploits } from "@/data/exploits";
import type { Exploit } from "@/types/exploit";
import Link from "next/link";

export default function ExploitsPage() {
  const stats = getExploitStats();
  const exploits = getAllExploits();

  const getBorderColor = (severity: string): string => {
    switch (severity) {
      case "critical":
        return "border-red-200 dark:border-red-800";
      case "high":
        return "border-orange-200 dark:border-orange-800";
      case "medium":
        return "border-yellow-200 dark:border-yellow-800";
      default:
        return "border-gray-200 dark:border-gray-800";
    }
  };

  const getValueBadgeVariant = (severity: string) => {
    switch (severity) {
      case "critical":
        return "destructive";
      case "high":
        return "secondary";
      case "medium":
        return "outline";
      default:
        return "outline";
    }
  };

  const getStatusBadgeVariant = (status: string) => {
    switch (status) {
      case "resolved":
        return "outline";
      case "partial":
        return "secondary";
      case "total-loss":
        return "destructive";
      case "ongoing":
        return "outline";
      default:
        return "outline";
    }
  };

  return (
    <SidebarProvider>
      <AppSidebar />
      <SidebarInset>
        <header className="flex h-12 shrink-0 items-center gap-2 border-b">
          <div className="flex items-center gap-2 px-4">
            <SidebarTrigger className="-ml-1" />
            <Separator orientation="vertical" className="mr-2 h-4" />
            <Breadcrumb>
              <BreadcrumbList>
                <BreadcrumbItem className="hidden md:block">
                  <BreadcrumbLink href="/dashboard">Dashboard</BreadcrumbLink>
                </BreadcrumbItem>
                <BreadcrumbSeparator className="hidden md:block" />
                <BreadcrumbItem className="hidden md:block">
                  <BreadcrumbLink href="/dashboard/vulnerabilities">
                    Vulnerabilities
                  </BreadcrumbLink>
                </BreadcrumbItem>
                <BreadcrumbSeparator className="hidden md:block" />
                <BreadcrumbItem>
                  <BreadcrumbPage>Protocol Exploits</BreadcrumbPage>
                </BreadcrumbItem>
              </BreadcrumbList>
            </Breadcrumb>
          </div>
          <SiteFunctionsHeader />
        </header>

        <div className="flex flex-1 flex-col gap-4 p-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-[0.8rem] font-semibold tracking-tight">
                Protocol Exploit Database
              </h1>
              <p className="text-xs text-muted-foreground mt-1">
                Comprehensive analysis of real-world DeFi protocol exploits and
                attack vectors
              </p>
            </div>
            {/*   <div className="flex items-center gap-2">
              <div className="relative">
                <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
                <Input
                  placeholder="Search exploits..."
                  className="pl-8 w-64 text-sx"
                />
              </div>
              <Button variant="outline" size="sm">
                <Filter className="h-4 w-4 mr-2" />
                <span className="text-sx">Filter</span>
              </Button>
            </div> */}
          </div>

          {/* Stats */}
          {/*  <div className="grid gap-4 md:grid-cols-4">
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sx font-medium">
                  Total Exploits
                </CardTitle>
                <AlertTriangle className="h-4 w-4 text-red-500" />
              </CardHeader>
              <CardContent>
                <div className="text-sx font-bold">{stats.totalExploits}</div>
                <p className="text-xs text-muted-foreground flex items-center gap-1">
                  <TrendingUp className="h-3 w-3" />+{stats.quarterlyChange}{" "}
                  this quarter
                </p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sx font-medium">
                  Total Value Lost
                </CardTitle>
                <DollarSign className="h-4 w-4 text-orange-500" />
              </CardHeader>
              <CardContent>
                <div className="text-sx font-bold">{stats.totalValueLost}</div>
                <p className="text-xs text-muted-foreground flex items-center gap-1">
                  <TrendingDown className="h-3 w-3" />
                  {stats.yearlyChange}% vs last year
                </p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sx font-medium">
                  Protocols Affected
                </CardTitle>
                <Users className="h-4 w-4 text-blue-500" />
              </CardHeader>
              <CardContent>
                <div className="text-sx font-bold">
                  {stats.protocolsAffected}
                </div>
                <p className="text-xs text-muted-foreground">
                  Unique protocols
                </p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sx font-medium">Avg. Loss</CardTitle>
                <DollarSign className="h-4 w-4 text-purple-500" />
              </CardHeader>
              <CardContent>
                <div className="text-sx font-bold">{stats.averageLoss}</div>
                <p className="text-xs text-muted-foreground">Per incident</p>
              </CardContent>
            </Card>
          </div> */}

          {/* Major Exploits */}
          <div className="space-y-6">
            {exploits.map((exploit: Exploit) => (
              <Card
                key={exploit.id}
                className={`${getBorderColor(exploit.severity)} border-l-4`}
              >
                <CardHeader className="pb-4">
                  <div className="flex items-start justify-between gap-4">
                    <div className="space-y-3 flex-1">
                      <div className="flex flex-wrap items-center gap-2">
                        <Badge
                          variant={getValueBadgeVariant(exploit.severity)}
                          className="font-semibold"
                        >
                          {exploit.valueLost}
                        </Badge>
                        <Badge variant="outline" className="text-xs">
                          {exploit.category}
                        </Badge>
                        <Badge variant="secondary" className="text-xs">
                          {exploit.year}
                        </Badge>
                        <Badge
                          variant={getStatusBadgeVariant(exploit.status)}
                          className="text-xs ml-auto"
                        >
                          {exploit.status === "total-loss"
                            ? "Total Loss"
                            : exploit.status.charAt(0).toUpperCase() +
                              exploit.status.slice(1)}
                        </Badge>
                      </div>
                      <div className="space-y-2">
                        <CardTitle className="text-sx font-semibold leading-tight">
                          {exploit.title}
                        </CardTitle>
                        <CardDescription className="text-xs leading-relaxed">
                          {exploit.description}
                        </CardDescription>
                      </div>
                    </div>
                    <div className="flex-shrink-0">
                      <Link
                        href={`/dashboard/vulnerabilities/exploits/${exploit.id}`}
                      >
                        <Button size="sm" variant="outline">
                          <span className="text-xs">View Details</span>
                        </Button>
                      </Link>
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="pt-0">
                  <div className="grid gap-6 lg:grid-cols-3">
                    {/* Attack Information */}
                    <div className="space-y-3">
                      <h4 className="text-xs font-semibold text-muted-foreground uppercase tracking-wide">
                        Attack Details
                      </h4>
                      <div className="space-y-2">
                        <div className="flex flex-col gap-1">
                          <span className="text-xs font-medium text-muted-foreground">
                            Attack Type
                          </span>
                          <span className="text-xs">{exploit.attackType}</span>
                        </div>
                        <div className="flex flex-col gap-1">
                          <span className="text-xs font-medium text-muted-foreground">
                            Root Cause
                          </span>
                          <span className="text-xs">{exploit.rootCause}</span>
                        </div>
                        {exploit.networks && (
                          <div className="flex flex-col gap-1">
                            <span className="text-xs font-medium text-muted-foreground">
                              Networks
                            </span>
                            <span className="text-xs">{exploit.networks}</span>
                          </div>
                        )}
                        {exploit.trigger && (
                          <div className="flex flex-col gap-1">
                            <span className="text-xs font-medium text-muted-foreground">
                              Trigger
                            </span>
                            <span className="text-xs">{exploit.trigger}</span>
                          </div>
                        )}
                      </div>
                    </div>

                    {/* Timeline Information */}
                    <div className="space-y-3">
                      <h4 className="text-xs font-semibold text-muted-foreground uppercase tracking-wide">
                        Timeline
                      </h4>
                      <div className="space-y-2">
                        <div className="flex flex-col gap-1">
                          <span className="text-xs font-medium text-muted-foreground">
                            Date
                          </span>
                          <div className="flex items-center gap-2">
                            <Calendar className="h-3 w-3 text-muted-foreground" />
                            <span className="text-xs">{exploit.date}</span>
                          </div>
                        </div>
                        {exploit.discoveryDelay && (
                          <div className="flex flex-col gap-1">
                            <span className="text-xs font-medium text-muted-foreground">
                              Discovery
                            </span>
                            <span className="text-xs">
                              {exploit.discoveryDelay}
                            </span>
                          </div>
                        )}
                        {exploit.recovery && (
                          <div className="flex flex-col gap-1">
                            <span className="text-xs font-medium text-muted-foreground">
                              Recovery
                            </span>
                            <span className="text-xs">{exploit.recovery}</span>
                          </div>
                        )}
                        {exploit.legalStatus && (
                          <div className="flex flex-col gap-1">
                            <span className="text-xs font-medium text-muted-foreground">
                              Legal Status
                            </span>
                            <span className="text-xs">
                              {exploit.legalStatus}
                            </span>
                          </div>
                        )}
                      </div>
                    </div>

                    {/* Impact Information */}
                    <div className="space-y-3">
                      <h4 className="text-xs font-semibold text-muted-foreground uppercase tracking-wide">
                        Impact
                      </h4>
                      <div className="space-y-2">
                        {exploit.details.impact && (
                          <div className="flex flex-col gap-1">
                            <span className="text-xs font-medium text-muted-foreground">
                              Impact
                            </span>
                            <span className="text-xs">
                              {exploit.details.impact}
                            </span>
                          </div>
                        )}
                        {exploit.details.validators && (
                          <div className="flex flex-col gap-1">
                            <span className="text-xs font-medium text-muted-foreground">
                              Validators
                            </span>
                            <span className="text-xs">
                              {exploit.details.validators}
                            </span>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </SidebarInset>
    </SidebarProvider>
  );
}
